#include <msp430.h>
unsigned int ADC_value=0;
unsigned char Tx_Data = 0;
int avg_adc = 0;
int adc[5];
int flag[5] = {0,0,0,0,0};
int p10=0, p11=0, p12=0, p13=0, p14=0, i=0;
int p10b=0, p11b=0, p12b=0, p13b=0, p14b=0;
void Setup_HW();
void Read_Acc();
void UARTSendArray(char *TxArray, int ArrayLength);
void sendFlex(int p10, int p11, int p12, int p13, int p14);
int main(void)
+{
  WDTCTL = WDTPW + WDTHOLD;                 // Stop WDT
  //if (CALBC1_1MHZ==0xFF)   // If calibration constant erased
 //    {
   //     while(1);          // do not load, trap CPU!!
  //   }

   DCOCTL  = 0;             // Select lowest DCOx and MODx settings
   BCSCTL1 = CALBC1_1MHZ;   // Set range
   DCOCTL  = CALDCO_1MHZ;   // Set DCO step + modulation

  //---------------- Configuring UART----------------------//

   //disable port2 pins to reduce noise and current consumption
   P2DIR |= 0xFF; // All P2.x outputs<
   P2OUT &= 0x00; // All P2.x reset

   //P1DIR  |=  BIT0 + BIT6;  // P1.0 and P1.6 output
   //P1OUT  &= ~BIT0 + BIT6;  // P1.0 and P1.6 = 0

   P1SEL  |=  BIT1 + BIT2;  // P1.1 UCA0RXD input
   P1SEL2 |=  BIT1 + BIT2;  // P1.2 UCA0TXD output

  //------------ Configuring the UART(USCI_A0) ----------------//

   UCA0CTL1 |=  UCSSEL_2 + UCSWRST;  // USCI Clock = SMCLK,USCI_A0 disabled
   UCA0BR0   =  104;                 // 104 From datasheet table-
   UCA0BR1   =  0;                   // -selects baudrate =9600,clk = SMCLK
   UCA0MCTL  =  UCBRS_1;             // Modulation value = 1 from datasheet
   UCA0STAT |=  UCLISTEN;            // loop back mode enabled
   UCA0CTL1 &= ~UCSWRST;             // Clear UCSWRST to enable USCI_A0

  //---------------- Enabling the interrupts ------------------//

  // IE2 |= UCA0TXIE;                  // Enable the Transmit interrupt
 //  IE2 |= UCA0RXIE;                  // Enable the Receive  interrupt
 //  _BIS_SR(GIE);                     // Enable the global interrupt
   //UCA0TXBUF = 'B';                  // Transmit a byte
  Setup_HW();
  Read_Acc(); // This function reads the ADC and stores the pin values
  for (;;)
  {
      Read_Acc(); // This function reads the ADC and stores the pin values
      if (p10 < 400)
      {
          p10b=80;
      }
    /*  else if (p10 <= 350)
      {
          p10b=60;
      }*/
      if (p10 > 400)
      {
          p10b=10;
      }
      if (p11 <= 250)
      {
          p11b=80;
      }
    /*  else if (p11 <= 250)
      {
          p11b=60;
      }*/
      if (p11 > 320)
      {
          p11b=10;
      }
      if (p12 <= 250)
      {
          p12b=80;
      }
   /*   else if (p12 <= 250)
      {
          p12b=60;
      }*/
      if (p12 > 320)
      {
          p12b=10;
      }
      if (p13 <= 250)
      {
          p13b=80;
      }
    /*  else if (p13 <= 250)
      {
          p13b=60;
      }*/
      if (p13 > 320)
      {
          p13b=10;
      }
      if (p14 <= 350)
      {
          p14b=80;
      }
    /*  else if (p14 <= 290)
      {
          p14b=60;
      }*/
      if (p14 > 400)
      {
          p14b=10;
      }
      sendFlex(p10b, p11b, p12b, p13b, p14b);
//__delay_cycles(300000);
  }
}
#pragma vector = USCIAB0TX_VECTOR
__interrupt void TransmitInterrupt(void)
{
  P1OUT  ^= BIT0;//light up P1.0 Led on Tx
}

#pragma vector = USCIAB0RX_VECTOR
__interrupt void ReceiveInterrupt(void)
{
  P1OUT  ^= BIT6;     // light up P1.6 LED on RX
  IFG2 &= ~UCA0RXIFG; // Clear RX flag
}
// ADC10 interrupt service routine
#pragma vector=ADC10_VECTOR
__interrupt void ADC10_ISR(void)
{
  __bic_SR_register_on_exit(CPUOFF);        // Clear CPUOFF bit from 0(SR)
}
void UARTSendArray(char *TxArray, int ArrayLength){
  while(ArrayLength--){             //Loop until StringLength == 0 and post decrement
    while(!(IFG2 & UCA0TXIFG));       //Wait for TX buffer to be ready for new data
    UCA0TXBUF = *TxArray++;           //Write the character at the location specified by the pointer and post increment
  }
}
void Setup_HW()
{
      ADC10CTL1 = INCH_7 + CONSEQ_1;            // A2/A1/A0, single sequence
      ADC10CTL0 = ADC10SHT_2 + MSC + ADC10ON + ADC10IE;
      ADC10DTC1 = 0x05;                         // 3 conversions
      ADC10AE0 |= (BIT3 | BIT4 | BIT5 | BIT6 | BIT7);                         // Disable digital I/O on P1.0 to P1.2
}
void Read_Acc()
{
    i=0;p10=0;p11=0;p12=0;p13=0;p14=0;
    for(i=1; i<=5 ; i++)
    {
    ADC10CTL0 &= ~ENC;
    while (ADC10CTL1 & BUSY);               // Wait if ADC10 core is active
    ADC10SA = (unsigned)&adc[0];            // Copies data in ADC10SA to unsigned int adc array
    ADC10CTL0 |= ENC + ADC10SC;             // Sampling and conversion start
    while (ADC10CTL1 & BUSY);               // Wait if ADC10 core is active
    p10 += adc[4];
    p11 += adc[3];
    p12 += adc[2];
    p13 += adc[1];
    p14 += adc[0];
    }                        // adc array 2 copied to the variable
    p10 = p10/5;
    p11 = p11/5;
    p12 = p12/5;
    p13 = p13/5;
    p14 = p14/5;
   // __bis_SR_register(CPUOFF + GIE);        // LPM0, ADC10_ISR will force exit
}
void sendFlex(int p10, int p11, int p12, int p13, int p14)
{
    if (p10 == 80 && flag[0] != 80)
        {
        UARTSendArray("b", 1);
        __delay_cycles(500000);
        flag[0] = 80;
        }
  /*  if (p10 == 60 && flag[0] != 60)
        {
        UARTSendArray("a", 1);
        __delay_cycles(500000);
        flag[0] = 60;
        }*/
    if (p10 == 10 && flag[0] != 10)
        {
        UARTSendArray("c", 1);
        __delay_cycles(100000);
        flag[0] = 10;
        }
    if (p11 == 80 && flag[1] != 80)
        {
        UARTSendArray("e", 1);
        __delay_cycles(100000);
        flag[1] = 80;
        }
    if (p12 == 80 && flag[2] != 80)
        {
        UARTSendArray("h", 1);
        __delay_cycles(100000);
        flag[2] = 80;
        }
    if (p13 == 80 && flag[3] != 80)
        {
        UARTSendArray("k", 1);
        __delay_cycles(100000);
        flag[3] = 80;
        }
    if (p14 == 80 && flag[4] != 80)
        {
        UARTSendArray("n", 1);
        __delay_cycles(100000);
        flag[4] = 80;
        }
  /*  if (p11 == 60 && flag[1] != 60)
        {
        UARTSendArray("d", 1);
        __delay_cycles(100000);
        flag[1] = 60;
        }
    if (p12 == 60 && flag[2] != 60)
        {
        UARTSendArray("g", 1);
        __delay_cycles(100000);
        flag[2] = 60;
        }
    if (p13 == 60 && flag[3] != 60)
        {
        UARTSendArray("j", 1);
        __delay_cycles(100000);
        flag[3] = 60;
        }
   if (p14 == 60 && flag[4] != 60)
        {
        UARTSendArray("m", 1);
        __delay_cycles(100000);
        flag[4] = 60;
        }*/
    if (p11 == 10 && flag[1] != 10)
        {
        UARTSendArray("f", 1);
        __delay_cycles(100000);
        flag[1] = 10;
        }
    if (p12 == 10 && flag[2] != 10)
        {
        UARTSendArray("i", 1);
        __delay_cycles(100000);
        flag[2] = 10;
        }
    if (p13 == 10 && flag[3] != 10)
        {
        UARTSendArray("l", 1);
        __delay_cycles(100000);
        flag[3] = 10;
        }
    if (p14 == 10 && flag[4] != 10)
        {
        UARTSendArray("o", 1);
        __delay_cycles(100000);
        flag[4] = 10;
        }
}
